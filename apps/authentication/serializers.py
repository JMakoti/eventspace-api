from rest_framework import serializers
from .models import User, OneTimePassword # Ensure OneTimePassword is imported if used elsewhere
from django.contrib.auth import authenticate
from rest_framework.exceptions import AuthenticationFailed
from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.utils.encoding import smart_str, smart_bytes, force_str
from django.contrib.auth.tokens import PasswordResetTokenGenerator
from django.contrib.sites.shortcuts import get_current_site
from django.urls import reverse
from .utils import send_normal_email # Assuming this utility exists
from rest_framework_simplejwt.tokens import RefreshToken, TokenError


class UserRegisterSerializer(serializers.ModelSerializer):

    password = serializers.CharField(max_length=68, min_length=6, write_only=True)
    password_confirm = serializers.CharField(max_length=68, min_length=6, write_only=True)

    class Meta:
        model = User
        fields = ['id','email', 'first_name', 'last_name', 'password', 'password_confirm']
        # 'id' is typically read-only, but including it here for registration doesn't hurt.
        # It will be auto-generated by the database.

    def validate(self, attr):
        password = attr.get('password', '')
        password_confirm = attr.get('password_confirm', '')
        if password != password_confirm:
            raise serializers.ValidationError('passwords do not match')
        return attr

    def create(self, validated_data):
        # Remove password_confirm before creating the user object as it's not a model field
        validated_data.pop('password_confirm')
        user = User.objects.create_user(
            email = validated_data['email'],
            first_name = validated_data['first_name'],
            last_name = validated_data['last_name'],
            password = validated_data['password']
        )
        return user
    
class LoginSerializer(serializers.Serializer):
    id            = serializers.IntegerField(read_only=True)
    full_name     = serializers.CharField(read_only=True)
    role          = serializers.CharField(read_only=True) # Assuming 'role' exists on your User model
    access_token  = serializers.CharField(read_only=True)
    refresh_token = serializers.CharField(read_only=True)

    email    = serializers.EmailField(write_only=True, max_length=255)
    password = serializers.CharField(write_only=True, max_length=128)

    def validate(self, attrs):
        email    = attrs.get('email')
        password = attrs.get('password')
        
        # Use DRF's built-in authenticate to handle user authentication
        user = authenticate(
            request=self.context.get('request'),
            email=email,
            password=password
        )

        if not user:
            raise AuthenticationFailed("Invalid credentials, try again.")
        if not user.is_verified: # Assuming you have an 'is_verified' field on your User model
            raise AuthenticationFailed("Email is not verified.")

        # Generate JWT tokens
        tokens = user.tokens() # Assuming 'tokens' method exists on your User model

        return {
            'id':            user.pk,
            'full_name':     user.get_full_name, # Assuming 'get_full_name' method exists
            'role':          user.role,
            'access_token':  str(tokens['access']), # Convert token objects to strings
            'refresh_token': str(tokens['refresh']), # Convert token objects to strings
        }

    def to_representation(self, validated_data):
        # Simply return exactly what validate() returned
        return validated_data

class PasswordResetRequestSerializer(serializers.Serializer):
    email = serializers.EmailField(max_length=255)

    class Meta:
        fields = ['email']

    def validate(self, attrs):
        email = attrs.get('email') 
        if User.objects.filter(email=email).exists(): # check if user is in the database
            user = User.objects.get(email=email)
            uidb64 = urlsafe_base64_encode(smart_bytes(user.id))
            token = PasswordResetTokenGenerator().make_token(user)
            
            # Use get_current_site(request).domain for production, "localhost:5173" for development
            # Ensure your Django SITE_ID setting is correctly configured for get_current_site to work in production.
            request = self.context.get('request')
            site_domain = get_current_site(request).domain 
            # If you are strictly using a frontend on a different domain/port, 
            # you might need to hardcode it or use an environment variable for `site_domain` in production.
            # For development, if your frontend is on 5173, keep that.
            # site_domain = "localhost:5173" # Keep this line if your frontend is always on 5173 during dev/prod.

            relative_link = reverse('password-reset-confirm', kwargs={
                'uidb64':uidb64,
                'token':token
            })
            abslink = f'http://{site_domain}{relative_link}'
            email_body = f'Hi use the link below to reset your email \n {abslink}'
            data = {
                'email_body':email_body,
                'email_subject':'reset your password',
                'to_email':user.email
            }
            send_normal_email(data) # Ensure send_normal_email is properly implemented
        return super().validate(attrs) 
# http://localhost:5173/password-reset-confirm/MQ/ctadwo-f74800b67dcf04d02d9b57fa7d57957e/
class SetNewPasswordSerializer(serializers.Serializer):
    password = serializers.CharField(max_length=100, min_length=6, write_only=True)
    password_confirm = serializers.CharField(max_length=100, min_length=6, write_only=True)
    uidb64 = serializers.CharField(write_only=True)
    token = serializers.CharField(write_only=True)

    class Meta:
        fields = ['password', 'password_confirm', 'uidb64', 'token']

    def validate(self, attrs):
        try:
            password = attrs.get('password')
            password_confirm = attrs.get('password_confirm')
            uidb64 = attrs.get('uidb64')
            token = attrs.get('token')

            user_id = force_str(urlsafe_base64_decode(uidb64))
            user = User.objects.get(id=user_id)

            if not PasswordResetTokenGenerator().check_token(user, token):
                raise AuthenticationFailed('reset link is invalid or has expired', 401)
            if password != password_confirm:
                raise AuthenticationFailed('password does not match')
        
            user.set_password(password)
            user.save()
            return user # Return the user instance on success
        except Exception as e:
            # Catch more specific exceptions if possible, but for a general catch, re-raise AuthenticationFailed
            raise AuthenticationFailed('link is invalid or has expired') 


class LogoutUsererializer(serializers.Serializer):
    refresh_token = serializers.CharField()

    default_error_message = {
        'key':('Token is invalid or has expired')
    }

    def validate(self, attrs):
        self.token = attrs.get('refresh_token')
        return attrs
        
    def save(self, **kwargs):
        try:
            token = RefreshToken(self.token)
            token.blacklist()
        except TokenError:
            # Use self.fail() for built-in error messages defined in default_error_message
            self.fail('key') # Refers to 'key' in default_error_message, which is 'Token is invalid or has expired'

# --- IMPORTANT: Refined UserSerializer for Fetching User Details ---
class UserSerializer(serializers.ModelSerializer):
    """
    Serializer for retrieving detailed information about a user.
    Adjust fields based on what you want to expose when fetching a user by ID.
    """
    class Meta:
        model = User
        fields = [
            'id', 
            'email', 
            'first_name', 
            'last_name', 
            # Include other fields from your User model that you wish to expose:
            # 'username', # Uncomment if your User model has a username field
            'is_active', 
            'is_staff', 
            'is_superuser', 
            'is_verified', # Assuming you have this field
            'date_joined', 
            'last_login',
            'role', # Assuming 'role' exists on your User model
            # Add any other custom fields you have on your User model that you want to expose
        ]
        read_only_fields = fields # All fields should be read-only for a GET detail view